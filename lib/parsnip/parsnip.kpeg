%%name = Parsnip::FormatParser

%% {
  include Parsnip::Ast
  attr_reader :grammar
}

eol = "\n"
space = " " | "\t" | eol
- = space*

root = - "grammar" - rules:rules - "end" - { @grammar = Ast::Grammar.new(Array(rules)) }

rules = rule:first (- rule)*:rest { [first, *rest] }

rule = name:name - "=" - expression:expression { Rule.new(name, expression) }

name = !"end" < /\w+/ > { text.to_sym }

expression = choice | sequence

choice = sequence:first (- "|" - sequence)+:rest { Choice.new([first, *rest]) }

sequence = value:first (- value)*:rest { Sequence.new([first, *rest]) }

value = rule_reference | string

rule_reference = name:name !(- "=") { RuleReference.new(name) }

string = single_quoted_string | double_quoted_string

single_quoted_string = "'" < /[^']*/ > "'" { StringLiteral.new(text) }

double_quoted_string = '"' < /[^"]*/ > '"' { StringLiteral.new(text) }

